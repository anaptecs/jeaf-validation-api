package com.anaptecs.jeaf.validation.api;

/**
 * Interface defines a very light-weight approach to validation e.g. in REST environments. This interface is not a
 * replacement of Java Bean Validation (JSR 303) but rather a simplified facade that e.g. can be used in code that is
 * generated by JEAF Generator.
 * 
 * @author JEAF Development Team
 */
public interface ValidationExecutor {
  /**
   * Method validates the passed request objects. It is expected that implementations throws a runtime exception that
   * describes all the validations that failed.
   * 
   * @param pService Class object representing the service to which the passed request object belongs to. The parameter
   * must not be null.
   * @param pRequestParameters All request parameters that should be validated. The parameter may be null. Please be
   * aware that <code>pRequestParameters</code> might contain a mixture of different types including Java collections
   * classes, primitive arrays etc.
   */
  default void validateRequest( Class<?> pService, Object... pRequestParameters ) {
  };

  /**
   * Method validates the passed response object. It is expected that implementations throws a runtime exception that
   * describes all the validations that failed.
   * 
   * @param pService Class object representing the service to which the passed request object belongs to. The parameter
   * must not be null.
   * @param pResponseObject Response object that should be validated. The parameter may be null.
   */
  default void validateResponse( Class<?> pService, Object pResponseObject ) {
  };

  /**
   * Method validates the passed object. It is expected that implementations throws a runtime exception that describes
   * all the validations that failed.
   * 
   * @param pObject Object that should be validated. The parameter may be null.
   */
  default void validateObject( Object pObject ) {
  };
}
